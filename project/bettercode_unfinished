function connectome_project()
% Download subject data:

subjects = xlsread('SWU_4');
subjects_count = length(subjects);
ones_count = 0;

for i = 1: subjects_count
    
    if subjects(i,3) == 1 
        
        ones_count = ones_count + 1;
    end

end

twos_count = length(subjects) - ones_count; 

% Download brain graph data from local disk. 
% Note there is seperate code wirtten in python
% to convert .graphml to .mat

matfiles = dir('*.mat');                   
files_count = length(matfiles);      
graphs = cell(1, files_count);

for i = 1:files_count                    
    
    graphs{i} = load(matfiles(i).name);
     
end
    
graphs_matrix = ones(length(graphs{1}.graph),length(matfiles));

%% Convert all graphs to vectors and classify

% Vectorize brain graphs:

for i = 1: length(graphs)
    
    graph_matrix(i,:) = reshape(graphs{i}.graph,70*70, 1);
end

% create a class vector

dim_graph_matrix = size(graph_matrix);
class_vector = [];

for i = 1:dim_graph_matrix(1)
    
    I = find(subjects(:,1) == str2num(matfiles(i).name(8:12)));
    
    class_vector(i) = subjects(I,3);
end

% Run classification function for vectorized brain graphs

train_class = class_vector(1:227);

train_features = full(graph_matrix(1:227,:));

test_features = full(graph_matrix(228:454,:));

test_class = class_vector(228:454);

vectorized_classifications = Connect_Learn(train_features, train_class, ...
    test_features, test_class);

%% Make graphs binary vectors and classify them 
%  Here 1 = edge exists between nodes. 0 = no edge.

% create binary matrix:

bin_graph_matrix = zeros(454, 4900);

for j = 1:454
    for i = 1:length(graph_matrix)
        
        if graph_matrix(j,i) ~= 0
            bin_graph_matrix(j,i) = 1;
        end
        
    end
end

% Run classification function for vectorized brain graphs 

bin_train = full(graph_matrix(1:227,:));

bin_test = full(graph_matrix(228:454,:));

bin_vector_classifications = Connectome_Learn(bin_train,...
    train_class, bin_test, test_class)
 
end
%%
function [classified] = Connectome_Learn(train_data, train_class, test_data, test_class)
% This function runs a series of binary classification algorithms. It
% returns a struct, explained below:

% (1) Run Linear Classifier. Note: pseduoLinear algo is on.

linear_model = fitcdiscr(train_data,train_class,'discrimType','pseudoLinear');
linear_test_class = predict(linear_model,test_data);

linear_misses = sum(abs(linear_test_class' - test_class));
linear_hit = 1 - (linear_misses/length(linear_test_class'));

% (2) Run Tree Classifier. Note: this is an ensemble of trees.

tree_model = TreeBagger(5,train_data,train_class,'OOBVarImp','On');
tree_test_class = predict(tree_model,test_data);

tree_test_class = str2num(cell2mat(tree_test_class));

tree_misses = sum(abs(tree_test_class' - test_class));
tree_hit = 1 - (tree_misses/length(tree_test_class'));

% (3) Run SVM Classifier. Note: kernel is assumed to be linear by default.

svm_model = fitcsvm(train_data,train_class);
svm_test_class = predict(svm_model,test_data);

svm_misses = sum(abs(svm_test_class' - test_class));
svm_hit = 1 - (svm_misses/length(svm_test_class'));

% (4) Run Naive Bayes Classifier. Note: strong independence between 
%     features is assumed.

nb_model = fitcnb(train_data,train_class);
nb_test_class = predict(nb_model,test_data);

nb_misses = sum(abs(nb_test_class' - test_class));
nb_hit = 1 - (nb_misses/length(nb_test_class'));

% (5) Run K nearest neighbor classifier. Note: need to specify K.

knn_model = fitcknn(train_data,train_class);
knn_test_class = predict(knn_model,test_data);

knn_misses = sum(abs(knn_test_class' - test_class));
knn_hit = 1 - (knn_misses/length(knn_test_class'));

% (6) All algorithms vote. Majority rules.

vote_test_class = [];

for i = 1:length(test_class)

    count = 0;
    
    if linear_test_class(i) = 1
        count = count + 1;
    end
    
    if tree_test_class(i) = 1
        count = count + 1;
    end
    
    if svm_test_class(i) = 1
        count = count + 1;
    end
    
    if nb_test_class(i) = 1
        count = count + 1;
    end
    
    if knn_test_class(i) = 1
        count = count + 1;
    end
    
    %take a vote   
    if count >= 3
        vote_test_class(i) = 1;
    else
        vote_test_class = 2;
        
    end
 
end

vote_misses = sum(abs(vote_test_class' - test_class));
vote_hit = 1 - (vote_misses/length(vote_test_class'));

classified = struct('HitRates',

%error(trees,full(graph_matrix(228:454,:)),class_vector(228:454))
%trees.OOBPermutedVarDeltaError


end
